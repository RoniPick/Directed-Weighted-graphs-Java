@startuml
'https://plantuml.com/class-diagram

interface DirectedWeightedGraph{
	EdgeData getEdge(int src, int dest)
	void addNode(NodeData n)
	void connect(int src, int dest, double w)
	Iterator<NodeData> nodeIter()
	Iterator<EdgeData> edgeIter()
	Iterator<EdgeData> edgeIter(int node_id)
	NodeData removeNode(int key)
	EdgeData removeEdge(int src, int dest)
	int nodeSize()
	int edgeSize()
	int getMC()
}
interface DirectedWeightedGraphAlgorithms{
    void init(DirectedWeightedGraph g)
    DirectedWeightedGraph getGraph()
    DirectedWeightedGraph copy()
    boolean isConnected()
    double shortestPathDist(int src, int dest)
    List<NodeData> shortestPath(int src, int dest)
    NodeData center()
    List<NodeData> tsp(List<NodeData> cities)
    boolean save(String file)
    boolean load(String file)
}
interface EdgeData{
    int getSrc()
	int getDest()
	double getWeight()
	String getInfo()
	void setInfo(String s)
	int getTag()
	void setTag(int t)
}

interface NodeData{
    int getKey()
	GeoLocation getLocation()
	void setLocation(GeoLocation p)
	double getWeight()
	void setWeight(double w)
	String getInfo()
	void setInfo(String s)
	int getTag()
	void setTag(int t)
}

interface GeoLocation{
    double x()
    double y()
    double z()
    double distance(GeoLocation g)
}
class Node {
 - int id
 - double weight
 - int tag
 - Geo location

}

class Geo {
- double x
- double y
- double z

}
class Edge {
- int src
- int dest
- double weight
- int tag
}
class Graph{
- int counter
- HashMap<Integer, HashMap<Integer, EdgeData>> edges
- HashMap<Integer, NodeData> nodes
- int itercounter
}

class GraphAlgorithms{
- Graph graph
- Boolean BFS(int n)
- HashMap<Integer, Double> DijkstraLength(int src)
- HashMap<Integer, NodeData> DijkstraPath(int src)
- Boolean relax(Edge e)

}

class Ex2 {
DirectedWeightedGraph getGrapg(String json_file)
DirectedWeightedGraphAlgorithms getGrapgAlgo(String json_file)
void runGUI(String json_file)
}

Ex2 -down-> GraphAlgorithms
GraphAlgorithms -down-> DirectedWeightedGraphAlgorithms
GraphAlgorithms -left-> Graph
Graph -down-> DirectedWeightedGraph
Graph -left-> Edge
Edge -down-> EdgeData
Graph -left-> Node
Node -down-> NodeData
Node -left-> Geo
Geo -down-> GeoLocation



@enduml